#version 120

varying vec2 texCoord;
varying vec3 worldPos;
varying mat3 tbnMatrix;

struct DirectionalLight
{
	vec4 color;
	float intensity;
	vec3 direction;
};

struct Material
{
	vec4 diffuseColor;
	sampler2D diffuseTexture;
	sampler2D normalTexture;
	float specularIntensity;
	float specularExponent;
};

uniform DirectionalLight directionalLight;
uniform Material material;

uniform vec3 eyePos;

void main()
{
	vec3 normal = tbnMatrix * normalize(texture2D(material.normalTexture, texCoord.xy).rgb * 2.0f - 1.0f);

	vec3 diffuse = vec3(0.0f, 0.0f, 0.0f);
	vec3 specular = vec3(0.0f, 0.0f, 0.0f);
	
	vec3 diffuseColor = texture2D(material.diffuseTexture, texCoord.xy).rgb * material.diffuseColor.rgb;
	float diffuseIntensity = max(dot(-directionalLight.direction, normal), 0.0f);
	diffuse = diffuseColor * diffuseIntensity * directionalLight.color.rgb;
	
	if(diffuseIntensity > 0.0f && material.specularIntensity > 0.0f)
	{
		vec3 reflectionDirection = normalize(reflect(directionalLight.direction, normal));
		vec3 viewDirection = normalize(eyePos - worldPos);
		float specularIntensity = dot(viewDirection, reflectionDirection);
		specularIntensity = pow(specularIntensity, material.specularExponent);
		
		if(specularIntensity > 0.0f)
		{
			specular = material.specularIntensity * specularIntensity * directionalLight.color.rgb;
		}
	}
	
	gl_FragColor = vec4(diffuse + specular, 1);
}