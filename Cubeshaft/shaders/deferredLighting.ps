#version 120

varying vec3 texCoord;

uniform sampler2D gbuffer_depth;
uniform sampler2D gbuffer_0;
uniform sampler2D gbuffer_1;

struct DirectionalLight
{
	vec3 color;
	float intensity;
	vec3 direction;
};

struct PointLight
{
	vec3 color;
	float intensity;
	vec3 position;
	float range;
};

struct SpotLight
{
	vec3 color;
	float intensity;
	vec3 position;
	vec3 direction;
	float range;
	float cutoff;
};

const int MAX_DIRECTIONAL_LIGHTS = 128;
const int MAX_POINT_LIGHTS = 128;
const int MAX_SPOT_LIGHTS = 128;

uniform DirectionalLight directionalLights[MAX_DIRECTIONAL_LIGHTS];
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];

uniform int numDirectionalLights;
uniform int numPointLights;
uniform int numSpotLights;

uniform mat4 matrix_inverseViewProjectionMatrix;

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 diffuseColor, vec3 normal)
{
	float nDotL = max(0.0f, dot(normal, -directionalLight.direction));
	return diffuseColor * nDotL;
}

//vec4 calcPointLight(PointLight pointLight, vec3 diffuseColor, vec3 normal, vec3 worldPosition)
//{
//	vec3 lightDirection = pointLight.position;
//}

//vec4 calcSpotLight(SpotLight spotLight)
//{
//}

void main()
{
	vec3 diffuseColor = texture2D(gbuffer_0, texCoord.xy).xyz;
	vec3 normal = texture2D(gbuffer_1, texCoord.xy).xyz * 2.0f - 1.0f;
//	float depth = texture2D(gbuffer_depth, texCoord.xy).r;
	
//	vec4 worldPosition = vec4(texCoord.xy * 2.0f - 1.0f, depth, 1.0f) * matrix_inverseViewProjectionMatrix;
//	worldPosition /= worldPosition.w;
	
	vec4 finalColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	
	for(int i = 0; i < numDirectionalLights; i++)
		finalColor += calcDirectionalLight(directionalLights[i], diffuseColor, normal);
	
//	for(int i = 0; i < numPointLights; i++)
//		finalColor += calcPointLight(pointLights[i], diffuseColor, normal, worldPosition);
	
//	for(int i = 0; i < numSpotLights; i++)
//		finalColor += calcSpotLight(spotLights[i]);
	
	gl_FragColor = finalColor;
}