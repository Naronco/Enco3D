#version 120

varying vec3 texCoord;
varying vec3 normal;
varying vec3 worldPos;

struct PointLight
{
	vec3 color;
	float intensity;
	vec3 position;
	float range;
};

uniform PointLight pointLight;

uniform vec3 mat_diffuseColor;
uniform sampler2D mat_diffuseTexture;
uniform float mat_specularIntensity;
uniform float mat_specularExponent;

uniform vec3 camera_translation;

void main()
{
	vec3 diffuse = vec3(0.0f, 0.0f, 0.0f);
	vec3 specular = vec3(0.0f, 0.0f, 0.0f);
	
	vec3 lightDirection = worldPos - pointLight.position;
	float distanceToLight = length(lightDirection);
	
	if(distanceToLight < pointLight.range)
	{
		lightDirection = normalize(lightDirection);
		float attenuation = 1.0f - (distanceToLight / pointLight.range);
		
		vec3 diffuseColor = texture2D(mat_diffuseTexture, texCoord.xy).rgb;
		float diffuseIntensity = max(dot(-lightDirection, normal), 0.0f) * attenuation;
		diffuse = diffuseColor * diffuseIntensity * pointLight.color.rgb;
	}
	
	if(mat_specularIntensity > 0.0f)
	{
		vec3 reflectionDirection = normalize(reflect(lightDirection, normal));
		vec3 viewDirection = normalize(camera_translation - worldPos);
		float specularIntensity = dot(viewDirection, reflectionDirection);
		specularIntensity = pow(specularIntensity, mat_specularExponent);
		
		if(specularIntensity > 0.0f)
		{
			specular = mat_specularIntensity * specularIntensity * pointLight.color.rgb;
		}
	}
	
	gl_FragColor = vec4(diffuse + specular, 1.0f);
}