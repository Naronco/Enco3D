#version 120

#define PI 3.1415926535897932384626433832795028841971693993751058209f

varying vec3 texCoord;

uniform sampler2D gbuffer_0;
uniform sampler2D gbuffer_1;
uniform sampler2D gbuffer_depth;

uniform sampler2D generatedImage_slot10;
uniform sampler2D generatedImage_slot11;

uniform vec2 postProcess_texelSize;

uniform float camera_tanHalfFov;
uniform float camera_aspectRatio;
uniform float camera_zNearClippingPlane;
uniform float camera_zFarClippingPlane;

uniform float velocityScale;

vec4 getColor(vec2 coord)
{
	return vec4(texture2D(gbuffer_0, coord.xy).rgb, 1.0f);
}

void main()
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FAST APPROXIMATE ANTI ALIASING (FXAA)
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
	gl_FragColor = getColor(texCoord.xy);
	
/*	float FXAA_SPAN_MAX = 8.0f;
	float FXAA_REDUCE_MUL = 1.0f / 8.0f;
	float FXAA_REDUCE_MIN = 1.0f / 128.0f;
	
	vec3 rgbNW = getColor(texCoord.xy + (vec2(-1.0f, -1.0f) * postProcess_texelSize)).xyz;
	vec3 rgbNE = getColor(texCoord.xy + (vec2(+1.0f, -1.0f) * postProcess_texelSize)).xyz;
	vec3 rgbSW = getColor(texCoord.xy + (vec2(-1.0f, +1.0f) * postProcess_texelSize)).xyz;
	vec3 rgbSE = getColor(texCoord.xy + (vec2(+1.0f, +1.0f) * postProcess_texelSize)).xyz;
	vec3 rgbM  = getColor(texCoord.xy).xyz;
	
	vec3 luma = vec3(0.299f, 0.587f, 0.114f);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot( rgbM, luma);

	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

	vec2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
	  
	float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);

	dir = min(vec2(FXAA_SPAN_MAX,  FXAA_SPAN_MAX), 
		max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * postProcess_texelSize;
		
	vec3 rgbA = (1.0/2.0) * (
			 getColor(texCoord.xy + dir * (1.0/3.0 - 0.5)).xyz +
			 getColor(texCoord.xy + dir * (2.0/3.0 - 0.5)).xyz);
	vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
			 getColor(texCoord.xy + dir * (0.0/3.0 - 0.5)).xyz +
			 getColor(texCoord.xy + dir * (3.0/3.0 - 0.5)).xyz);
	float lumaB = dot(rgbB, luma);

	if((lumaB < lumaMin) || (lumaB > lumaMax)){
		gl_FragColor.xyz = rgbA;
	} else {
		gl_FragColor.xyz = rgbB;
	}
	
	gl_FragColor.a = 1.0;*/
	
///////////////////////////////////////////////////////////////////////////////////////////////////////
// MOTION BLUR
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
/*	vec2 velocity = texture2D(gbuffer_velocityTexture, texCoord.xy).xy;
	if(length(velocity) > 0.0f)
	{
		float oneDivThree = 1.0f / 3.0f;
		velocity = pow(velocity, vec2(oneDivThree, oneDivThree));
		velocity = velocity * 2.0f - 1.0f;
		velocity *= velocityScale;
		
		float speed = length(velocity / postProcess_texelSize);
		int motionBlurSamples = int(speed) < 1 ? 1 : (int(speed) > 32 ? 32 : int(speed));
		
		vec4 motionBlurResult = getColor(texCoord.xy);
		for(int i = 1; i < motionBlurSamples; ++i)
		{
			vec2 offset = velocity * (float(i) / float(motionBlurSamples - 1) - 0.5f);
			motionBlurResult += getColor(texCoord.xy + offset);
		}
		
		motionBlurResult /= float(motionBlurSamples);
		
		gl_FragColor = motionBlurResult;
	}*/
	
///////////////////////////////////////////////////////////////////////////////////////////////////////
// SCREEN SPACE AMBIENT OCCLUSION (SSAO)
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	float ssao = texture2D(generatedImage_slot11, texCoord.xy).r;
	
///////////////////////////////////////////////////////////////////////////////////////////////////////
// BLOOM
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	vec4 bloom = texture2D(generatedImage_slot10, texCoord.xy);
	
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FINAL COLOR
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	gl_FragColor = gl_FragColor * ssao;
//	gl_FragColor = gl_FragColor * ssao;
	
//	gl_FragColor = texture2D(gbuffer_velocityTexture, texCoord.xy);
//	gl_FragColor = texture2D(postProcess_compositeTexture, texCoord.xy);
//	gl_FragColor = gl_FragColor * ssao + bloom;
}